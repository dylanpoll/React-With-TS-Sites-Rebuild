/*  
following bens tutorial for this project, will use to re learn react with typescript and familiarize further with SQL and to learn graphQL after this I will re build my websites and projects that warrant revamping.
https://www.youtube.com/watch?v=I6ypD7qv3Z8

migrations just prep the db for schemas we submit to it for SQL db
REMEMBER TO ADD NEW ENTITIES TO MIKROORM CONFIG!!!
AND RESOLVERS TO INDEX APOLLO!

TO SIGN IN TO DB 
psql -U postgres   
CREATE USER ***username*** WITH SUPERUSER ENCRYPTED PASSWORD '****password*****';
mikroORM handles database access 
=============

Notes: 
----sessions breakdown.
  redis is a "key value store" and essentially what that boils down to is that it is keeping a active log
of generated tokens/keys, the client source assigned to those keys, the paramaters of said key and keeps a socket open for said keys/tokens.
this occurs when the process for assigning a property like a cookie property or any other key/token within redis first.
  the express session reads the generated token/key from redis and assigns it a cookie id and puts it into a cookie property so the client side/browser can retain the information
so the session that a client has with our server can stay active and is used as a check to validate who is connected to what account.
  whenever a client makes any request, or leaves and comes back this cookie is sent to the server for validation and re assignment.
it takes the cookie value that is stored and uses that to re connect the client to the active token/key associated with that cookies code generated by our secrete.
  when it sends the cookie key to the redis server, the redis server turns the cookie key into the redis session, and returns the data initially requested that is associated with the cookie.
tdlr
  1) user data generated(logs in) -> redis assigned session -> cookie key created with secrete -> cookie updated with current cookie key
  2) request made(userid or is authenticated?) -> cookie key -> redis session key -> requested user data

about CORS https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
  CORS is used to validate sessions accross multiple website exchanges.

-----typescript 
  works with types....so it sometimes is a good idea to set object types to const



*/